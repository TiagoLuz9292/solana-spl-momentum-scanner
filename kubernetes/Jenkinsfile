pipeline {
    agent any

    environment {
        AWS_REGION = 'eu-north-1'
        KUBECONFIG_PATH = '/home/ec2-user/devops_setup/jenkins-docker/kubeconfig-jenkins.yaml'
        GIT_REPO = 'https://github.com/TiagoLuz9292/solana-spl-momentum-scanner.git'
        GIT_BRANCH = 'master'
        INVENTORY_FILE = '/home/ec2-user/devops_setup/kubernetes/inventory'
    }

    stages {
        stage('Verify Environment') {
            steps {
                script {
                    // Print environment variables for debugging
                    sh 'printenv | grep AWS'
                }
            }
        }
        stage('Prepare Environment') {
            steps {
                script {
                    // Ensure the target directory exists and has the right permissions
                    sh 'mkdir -p /root/project/devops/kubernetes'
                    sh 'chmod 755 /root/project/devops/kubernetes'
                    // Print current directory and permissions for debugging
                    sh 'pwd'
                    sh 'ls -ld /root/project/devops/kubernetes'
                }
            }
        }
        stage('Cleanup Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Clone Repository') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'git_hub', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                    script {
                        sh 'git clone https://$GIT_USERNAME:$GIT_PASSWORD@github.com/TiagoLuz9292/solana-spl-momentum-scanner.git -b ${GIT_BRANCH} .'
                    }
                }
            }
        }
        stage('Generate Inventory') {
            steps {
                script {
                    sh '/home/ec2-user/devops_setup/terraform/generate_inventory.sh'
                }
            }
        }
        stage('Add to Known Hosts') {
            steps {
                script {
                    def inventory = readFile("${INVENTORY_FILE}")
                    def hosts = inventory.split('\n').findAll { it.contains('ansible_host') }.collect { it.split('=')[1].split()[0] }
                    for (host in hosts) {
                        sh "ssh-keyscan -H ${host} >> ~/.ssh/known_hosts"
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Apply Kubernetes manifests for backend and frontend
                    sh 'kubectl apply -f kubernetes/k8s-manifests/backend-deployment.yaml --kubeconfig=$KUBECONFIG_PATH --validate=false'
                    sh 'kubectl apply -f kubernetes/k8s-manifests/backend-service.yaml --kubeconfig=$KUBECONFIG_PATH --validate=false'
                    sh 'kubectl apply -f kubernetes/k8s-manifests/frontend-deployment.yaml --kubeconfig=$KUBECONFIG_PATH --validate=false'
                    sh 'kubectl apply -f kubernetes/k8s-manifests/frontend-service.yaml --kubeconfig=$KUBECONFIG_PATH --validate=false'
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
